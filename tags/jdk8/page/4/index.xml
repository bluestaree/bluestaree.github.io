<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>jdk8 on AzkeepToo个人博客</title>
    <link>https://bluestaree.github.io/tags/jdk8/</link>
    <description>Recent content in jdk8 on AzkeepToo个人博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 28 Apr 2020 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://bluestaree.github.io/tags/jdk8/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>CompletableFuture-异步编排</title>
      <link>https://bluestaree.github.io/2020/07/completablefuture-%E5%BC%82%E6%AD%A5%E7%BC%96%E6%8E%92/</link>
      <pubDate>Wed, 22 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://bluestaree.github.io/2020/07/completablefuture-%E5%BC%82%E6%AD%A5%E7%BC%96%E6%8E%92/</guid>
      <description>前言：在一些业务复杂的场景中，往往会涉及多个业务之间的相互调用，通过线程池性能稳定，也可以获取执行结果，并捕获异常。但是，在业务复杂情况下，</description>
    </item>
    
    <item>
      <title>Spring Cache使用</title>
      <link>https://bluestaree.github.io/2020/07/springcache%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Mon, 13 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://bluestaree.github.io/2020/07/springcache%E4%BD%BF%E7%94%A8/</guid>
      <description>转载 · 原文链接：https://www.jianshu.com/p/6db623355e11 一、概述 SpringCache本身是一个缓存体系</description>
    </item>
    
    <item>
      <title>缓存与数据库一致性问题及最佳解决方案</title>
      <link>https://bluestaree.github.io/2020/07/%E7%BC%93%E5%AD%98%E4%B8%8E%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8F%8C%E5%86%99%E4%B8%80%E8%87%B4%E6%80%A7%E9%97%AE%E9%A2%98%E5%8F%8A%E6%9C%80%E4%BD%B3%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</link>
      <pubDate>Thu, 09 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://bluestaree.github.io/2020/07/%E7%BC%93%E5%AD%98%E4%B8%8E%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8F%8C%E5%86%99%E4%B8%80%E8%87%B4%E6%80%A7%E9%97%AE%E9%A2%98%E5%8F%8A%E6%9C%80%E4%BD%B3%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</guid>
      <description>前言：现在互联网高并发的背景下，为了有效的提高服务应用的响应速度，相信大家都会想到采用缓存技术。然而如果你的应用引入了缓存机制，那么有一个问</description>
    </item>
    
    <item>
      <title>分布式锁实现-Redisson</title>
      <link>https://bluestaree.github.io/2020/07/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E5%AE%9E%E7%8E%B0-redisson/</link>
      <pubDate>Wed, 08 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://bluestaree.github.io/2020/07/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E5%AE%9E%E7%8E%B0-redisson/</guid>
      <description>概述：Redisson是架设在Redis基础上的一个Java驻内存数据网格。简单来说就是Redis分布式锁对于Java语言的实现，其提供的许</description>
    </item>
    
    <item>
      <title>高并发下的缓存失效问题及解决方案</title>
      <link>https://bluestaree.github.io/2020/07/%E9%AB%98%E5%B9%B6%E5%8F%91%E4%B8%8B%E7%9A%84%E7%BC%93%E5%AD%98%E5%A4%B1%E6%95%88%E9%97%AE%E9%A2%98/</link>
      <pubDate>Mon, 06 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://bluestaree.github.io/2020/07/%E9%AB%98%E5%B9%B6%E5%8F%91%E4%B8%8B%E7%9A%84%E7%BC%93%E5%AD%98%E5%A4%B1%E6%95%88%E9%97%AE%E9%A2%98/</guid>
      <description>概览：在高并发场景下，缓存在读模式下所存在的问题 缓存穿透 缓存雪崩 缓存击穿 缓存穿透 指查询一个一定不存在的数据，由于缓存是不命中，将去查询数据库</description>
    </item>
    
    <item>
      <title>Spring Cloud Alibaba-Nacos 注册与配置中心</title>
      <link>https://bluestaree.github.io/2020/07/springcloud-alibaba-nacos-%E6%B3%A8%E5%86%8C%E4%B8%8E%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/</link>
      <pubDate>Wed, 01 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://bluestaree.github.io/2020/07/springcloud-alibaba-nacos-%E6%B3%A8%E5%86%8C%E4%B8%8E%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/</guid>
      <description>由于Spring Cloud Eureka已经宣布停止开源计划，不再继续维护，这怎么行，还能愉快的使用吗。 今天在空闲之余了解了下另外一个功能更加强大的注</description>
    </item>
    
    <item>
      <title>TCP粘包和拆包问题</title>
      <link>https://bluestaree.github.io/2020/06/tcp%E7%B2%98%E5%8C%85%E5%92%8C%E6%8B%86%E5%8C%85%E9%97%AE%E9%A2%98/</link>
      <pubDate>Thu, 25 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://bluestaree.github.io/2020/06/tcp%E7%B2%98%E5%8C%85%E5%92%8C%E6%8B%86%E5%8C%85%E9%97%AE%E9%A2%98/</guid>
      <description>前言：TCP是面向连接的，面向流的，提供高可靠性服务。收发两端(客户端和服务器端)都要有一一成对的socket，因此发送端为了将多个发给接收</description>
    </item>
    
    <item>
      <title>定时器-cron表达式</title>
      <link>https://bluestaree.github.io/2020/06/%E5%AE%9A%E6%97%B6%E5%99%A8-cron%E8%A1%A8%E8%BE%BE%E5%BC%8F/</link>
      <pubDate>Tue, 23 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://bluestaree.github.io/2020/06/%E5%AE%9A%E6%97%B6%E5%99%A8-cron%E8%A1%A8%E8%BE%BE%E5%BC%8F/</guid>
      <description>参考：Quartz文档 cron表达式基本语法：秒 分 时 日 月 周 年 (共7位，其中第7位 年 在Spring中不支持) 特殊字符: ,：枚举; (cron=&amp;quot;7,9,23 * * * * ?&amp;</description>
    </item>
    
    <item>
      <title>Netty编解码器</title>
      <link>https://bluestaree.github.io/2020/06/netty%E7%9A%84%E7%BC%96%E8%A7%A3%E7%A0%81%E5%99%A8/</link>
      <pubDate>Sat, 20 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://bluestaree.github.io/2020/06/netty%E7%9A%84%E7%BC%96%E8%A7%A3%E7%A0%81%E5%99%A8/</guid>
      <description>Netty的编解码器 当Netty发送或者接受一个消息的时候，就将会发生一次数据转换。入站消息会被解码：从字节转换为另一种格式(比如java对</description>
    </item>
    
    <item>
      <title>Netty-Handler链的调用机制</title>
      <link>https://bluestaree.github.io/2020/06/handler%E9%93%BE%E7%9A%84%E8%B0%83%E7%94%A8%E6%9C%BA%E5%88%B6/</link>
      <pubDate>Thu, 18 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://bluestaree.github.io/2020/06/handler%E9%93%BE%E7%9A%84%E8%B0%83%E7%94%A8%E6%9C%BA%E5%88%B6/</guid>
      <description>前言：Netty中ChannelHandler 的作用就是处理IO事件或拦截IO事件，并将其处理结果转发给下一个Handler，那么Handl</description>
    </item>
    
    <item>
      <title>Netty基础组件</title>
      <link>https://bluestaree.github.io/2020/06/netty%E7%BB%84%E4%BB%B6%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Wed, 17 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://bluestaree.github.io/2020/06/netty%E7%BB%84%E4%BB%B6%E4%BB%8B%E7%BB%8D/</guid>
      <description>总览 Bootstrap or ServerBootstrap EventLoop or EventLoopGroup ChannelInitializer ChannelHandler ChannelPipeline ChannelHandlerContext Future or ChannelFuture Bootstrap or ServerBootstrap 都是用来启动一个Netty应用的配置类，它主要作用是配置整个Netty程序，串联起各个组件。 EventLoop or EventLoopGroup EventLoopGroup 是一</description>
    </item>
    
    <item>
      <title>Netty初体验</title>
      <link>https://bluestaree.github.io/2020/06/netty%E5%88%9D%E4%BD%93%E9%AA%8C/</link>
      <pubDate>Sun, 14 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://bluestaree.github.io/2020/06/netty%E5%88%9D%E4%BD%93%E9%AA%8C/</guid>
      <description>前言：通过Netty完成一个简单的多客户端与单服务端交互的demo Netty初体验 服务端 public class NettyServer { public static void main(String[] args) throws Exception { //1. 创建两个线程组 bossGroup 和 workerGroup //2. bossGroup 只</description>
    </item>
    
    <item>
      <title>零拷贝</title>
      <link>https://bluestaree.github.io/2020/06/%E9%9B%B6%E6%8B%B7%E8%B4%9D/</link>
      <pubDate>Fri, 12 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://bluestaree.github.io/2020/06/%E9%9B%B6%E6%8B%B7%E8%B4%9D/</guid>
      <description>转载 · 原文链接：https://www.jianshu.com/p/275602182f39 前言 零拷贝这三个字，一直是服务器网络编程的关键字</description>
    </item>
    
    <item>
      <title>Netty的IO模型</title>
      <link>https://bluestaree.github.io/2020/06/io%E6%A8%A1%E5%9E%8B/</link>
      <pubDate>Tue, 09 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://bluestaree.github.io/2020/06/io%E6%A8%A1%E5%9E%8B/</guid>
      <description>前言 IO模型：就是用什么样的通道进行数据的发送和接收,很大程度上决定了程序通信的性能 而netty是一款基于NIO(Nonblocking I/</description>
    </item>
    
    <item>
      <title>Netty线程模型</title>
      <link>https://bluestaree.github.io/2020/06/netty%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B/</link>
      <pubDate>Mon, 08 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://bluestaree.github.io/2020/06/netty%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B/</guid>
      <description>前言 不同的线程模型，对程序的性能有很大的影响，Netty线程模型主要基于主从Reactor多线程模型做了一定的改进 目前存在的线程模型有： 传统</description>
    </item>
    
    <item>
      <title>正向代理与方向代理</title>
      <link>https://bluestaree.github.io/2020/06/%E6%AD%A3%E5%90%91%E4%BB%A3%E7%90%86%E4%B8%8E%E6%96%B9%E5%90%91%E4%BB%A3%E7%90%86/</link>
      <pubDate>Fri, 05 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://bluestaree.github.io/2020/06/%E6%AD%A3%E5%90%91%E4%BB%A3%E7%90%86%E4%B8%8E%E6%96%B9%E5%90%91%E4%BB%A3%E7%90%86/</guid>
      <description>所谓的正向与反向，都是对于我们自己的电脑来说 正向代理：帮助客户端访问外部资源的， 举个例子：如科学上网。如果我们需要访问谷歌，就需要代理服务器</description>
    </item>
    
    <item>
      <title>Object划分</title>
      <link>https://bluestaree.github.io/2020/06/object%E5%88%92%E5%88%86/</link>
      <pubDate>Tue, 02 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://bluestaree.github.io/2020/06/object%E5%88%92%E5%88%86/</guid>
      <description>1.PO(Persistant Object) 持久对象 PO就是对应数据库中某个表中的一条记录,多个记录可以用PO的集合。PO中应该不包含任何对数据库的操作。 2.DO(Domain object) 领域对象 就是从现实世界</description>
    </item>
    
    <item>
      <title>使用JSR303规范标准进行数据校验</title>
      <link>https://bluestaree.github.io/2020/05/%E4%BD%BF%E7%94%A8jsr303%E8%A7%84%E8%8C%83%E6%A0%87%E5%87%86%E8%BF%9B%E8%A1%8C%E6%95%B0%E6%8D%AE%E6%A0%A1%E9%AA%8C/</link>
      <pubDate>Thu, 28 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://bluestaree.github.io/2020/05/%E4%BD%BF%E7%94%A8jsr303%E8%A7%84%E8%8C%83%E6%A0%87%E5%87%86%E8%BF%9B%E8%A1%8C%E6%95%B0%E6%8D%AE%E6%A0%A1%E9%AA%8C/</guid>
      <description>前言 现在的项目大多都是前后端分离的项目，那么对于一些重要数据的校验，单单使用前端控制是不行的，我们可以使用一些http请求工具如 Postman ，就可以轻</description>
    </item>
    
    <item>
      <title>Hibernate常见问题</title>
      <link>https://bluestaree.github.io/2020/05/hibernate%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</link>
      <pubDate>Sat, 23 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://bluestaree.github.io/2020/05/hibernate%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</guid>
      <description>转载 · 原文链接：https://blog.csdn.net/wu1317581750/java/article/details/816629</description>
    </item>
    
    <item>
      <title>Navicat连接MySQL出现1251错误</title>
      <link>https://bluestaree.github.io/2020/05/navicat-1251%E9%94%99%E8%AF%AF/</link>
      <pubDate>Sat, 16 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://bluestaree.github.io/2020/05/navicat-1251%E9%94%99%E8%AF%AF/</guid>
      <description>记录一个坑，我现在所用的MySQL数据库的版本是8.019，在尝试使用Navicat连接数据库时，出现1251错误 解决方法： 进入docker</description>
    </item>
    
  </channel>
</rss>
